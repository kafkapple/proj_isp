defaults:
  - _self_


general:
  outputs: outputs/${now:%Y%m%d_%H%M%S}  # 기본 outputs 경로 설정

hydra:
  run:
    dir: ${general.outputs}
  output_subdir: log  # hydra 로그를 outputs/[날짜]/[시간]/log에 저장

debug:
  show_prompt: true
  show_generation: true
  show_retrieval: true
  show_full_prompt: true  # 전체 프롬프트 출력 여부

data:
  name: "isear"  # 데이터셋 이름 (isear, custom 등)
  csv_file: "isear.csv"  # 저장될 파일 이름
  n_samples: 70 #-1  # 최소 각 클래스당 10개 샘플 보장 (7개 클래스 * 10 = 70)
  train_size: 0.8  # 제거 가능 (사용하지 않음)
  val_size: 0.2
  column_mapping:
    text: "SIT"
    emotion: "EMOT"
  datasets:
    isear:  # isear 데이터셋 관련 설정
      urls:
        - "https://raw.githubusercontent.com/sinmaniphel/py_isear_dataset/master/isear.csv"
      required_columns: ["SIT", "EMOT"]
      separator: "|"
model:
  use_rag: false #true  # RAG 사용 여부
  provider: "lmstudio" #"openai"
  openai:
    chat_model_name: "gpt-3.5-turbo"
    embedding_model: "text-embedding-3-small"
  embeddings:
    default_model: "BAAI/bge-m3"
    fallback_model: "all-MiniLM-L6-v2"
  lmstudio:
    base_url: "http://localhost:1234/v1"
    api_key: "not-needed"
  retriever:
    k: 3  # 최종적으로 반환할 문서 수 (1-20 권장)
    score_threshold: 1.5  # L2 거리 임계값 (1.0-2.0 범위 권장, 현재 점수 분포 고려)
    fetch_k: 10  # 초기 후보 검색 수 (k의 3-4배 권장)
    search_type: "similarity"  # 검색 방식 ("similarity" 또는 "mmr")
    # MMR (Maximum Marginal Relevance) 관련 설정
    mmr:
      lambda_mult: 0.5  # diversity vs similarity 트레이드오프 (0: max diversity, 1: max similarity)
    # 성능 관련 설정
    nprobe: 10  # 검색 시 탐색할 클러스터 수 (높을수록 정확도↑ 속도↓, 4-64 범위 권장)
    ef_search: 40  # HNSW 그래프 탐색 범위 (높을수록 정확도↑ 속도↓, 20-200 범위 권장)
  templates:
    base: |
      You are an expert in emotion analysis. Your task is to classify the emotion as EXACTLY ONE of these words: {emotions}

      CRITICAL INSTRUCTIONS:
      1. You MUST return ONLY ONE WORD from this list: {emotions}
      2. DO NOT use any other words or emotions
      3. DO NOT add any explanation or additional text
      4. Return the emotion word alone

      Text to classify: {input}
      Emotion (one word only):
    
    rag: |
      You are an expert in emotion analysis. Your task is to classify the emotion as EXACTLY ONE of these words: {emotions}

      CRITICAL INSTRUCTIONS:
      1. You MUST return ONLY ONE WORD from this list: {emotions}
      2. DO NOT use any other words or emotions
      3. DO NOT add any explanation or additional text
      4. Return the emotion word alone

      Here are some similar examples for reference:
      {examples}

      Text to classify: {input}
      Emotion (one word only):

emotions:
  # 1-7 순서대로 감정 클래스 정의
  classes: ["joy", "fear", "anger", "sadness", "disgust", "shame", "guilt"]

analysis:
  embedding:
    method: "traditional"  # "traditional" or "dec"
    traditional:
      reducer:
        type: "umap"  # "pca" or "umap"
        pca:
          n_components: 2
        umap:
          n_neighbors: 15
          min_dist: 0.1
          n_components: 2
      clustering:
        type: "gmm"  # "kmeans" or "gmm"
        k_range: [2, 3, 4, 5, 6, 7, 8, 9, 10]
        kmeans:
          n_init: 10
          random_state: 42
        gmm:
          covariance_type: "full"  # "full", "tied", "diag", "spherical"
          random_state: 42
        best_k_criterion:
          type: "combined"  # "intrinsic", "extrinsic", or "combined"
          metric: "average"
    dec:
      pretrain_epochs: 10
      clustering_epochs: 10
      batch_size: 256
      update_interval: 140
      tol: 0.001
      learning_rate: 0.001
      hidden_dims: [500, 500, 2000, 10]
    visualization:
      scatter:
        cmap: "Set2"
        alpha: 0.7
      heatmap:
        cmap: "RdYlBu_r"
        fmt: ".2f"
    metrics:
      intrinsic: ["silhouette", "calinski_harabasz", "davies_bouldin"]
      extrinsic: ["adjusted_rand", "normalized_mutual_info"]

 